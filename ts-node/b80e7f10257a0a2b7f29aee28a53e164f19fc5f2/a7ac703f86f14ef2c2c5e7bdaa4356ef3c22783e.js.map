{"version":3,"file":"/Users/connor/Desktop/Programming/myModules/peer-tracker/Server.ts","sources":["/Users/connor/Desktop/Programming/myModules/peer-tracker/Server.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nimport { createServer }     from \"http\";\nimport * as url             from \"url\";\nimport * as WebSocketServer from \"ws\";\nimport * as express         from \"express\";\nimport * as dgram           from \"dgram\";\nimport * as readUInt64BE    from \"readuint64be\";\nimport { Buffer }           from \"buffer\";\nimport * as _               from \"lodash\";\n\n// Health Insurrance:\nprocess.on(\"uncaughtException\", function (err) {\n  console.log(err);\n});\n\nconst debug           = require(\"debug\")(\"PeerTracker:Server\"),\n      redis           = require(\"redis\"),\n      GeoIpNativeLite = require(\"geoip-native-lite\"),\n      bencode         = require(\"bencode\"),\n      cors            = require(\"cors\");\n\n// Load in GeoData\nGeoIpNativeLite.loadDataSync();\n\n// Keep statistics going, update every 30 min\nlet stats = {\n  seedCount: 0,\n  leechCount: 0,\n  torrentCount: 0,\n  activeTcount: 0,\n  scrapeCount: 0,\n  successfulDown: 0,\n  countries: {}\n};\n\ninterface Stats {\n  seedCount: number;\n  leechCount: number;\n  torrentCount: number;\n  activeTcount: number;\n  scrapeCount: number;\n  successfulDown: number;\n  countries: Object;\n}\n\nconst ACTION_CONNECT        = 0\n    , ACTION_ANNOUNCE       = 1\n    , ACTION_SCRAPE         = 2\n    , ACTION_ERROR          = 3\n    , INTERVAL              = 1801\n    , startConnectionIdHigh = 0x417\n    , startConnectionIdLow  = 0x27101980;\n\n// Without using streams, this can handle ~320 IPv4 addresses. More doesn't necessarily mean better.\nconst MAX_PEER_SIZE         = 1500;\nconst FOUR_AND_FIFTEEN_DAYS = 415 * 24 * 60 * 60; // assuming start time is seconds for redis;\n\n\n// Redis\n\nlet client;\n\n\ninterface Options {\n  port:    number;\n  udpPort: number;\n  docker:  Boolean;\n}\n\nclass Server {\n  _debugId: number;\n  PORT:     number;\n  udpPORT:  number;\n  server:   any;\n  wss:      WebSocketServer;\n  udp4:     any;\n  app:      express;\n  constructor(opts?: Options) {\n    const self   = this;\n    if (!opts)\n      opts = { port: 80, udpPort: 1337, docker: false };\n\n    self._debugId = ~~((Math.random() * 100000) + 1);\n    self._debug(\"peer-tracker Server instance created\");\n    self.PORT    = opts.port;\n    self.udpPORT = opts.udpPort;\n    self.app     = express();\n    self.app.use(cors());\n\n    self.server  = createServer();\n    self.wss     = new WebSocketServer.Server({ server: self.server });\n    self.udp4    = dgram.createSocket({ type: \"udp4\", reuseAddr: true });\n\n    // PREP VISUAL AID:\n    console.log(`\n        .\n        |\n        |\n        |\n       |||\n      /___\\\\\n     |_   _|\n     | | | |\n    |  | |  |\n    |__| |__|         Peer Tracker 1.2.0\n    |  | |  |\n    |  | |  |\n    |  | |  |         Running in standalone mode\n    |  | |  |         UDP PORT:       ${self.udpPORT}\n    |  | |  |         HTTP & WS PORT: ${self.PORT}\n    |  |_|  |\n    |__| |__|\n    |  | |  |         LET'S BUILD AN EMPIRE!\n   |   | |   |           https://github.com/CraigglesO/peer-tracker\n   |   | |   |\n  |    | |    |\n  |____|_|____|\n      `);\n\n    // Redis\n    if (opts.docker)\n      client = redis.createClient(\"6379\", \"redis\");\n    else\n      client = redis.createClient();\n\n    // If an error occurs, print it to the console\n    client.on(\"error\", function (err) {\n        console.log(\"Redis error: \" + err);\n    });\n    client.on(\"ready\", function() {\n      console.log(new Date() + \": Redis is up and running.\");\n    });\n\n    self.app.set(\"trust proxy\", function (ip) {\n      return true;\n    });\n\n\n    // Express\n\n    self.app.get(\"/\", function (req, res) {\n      console.log(\"here2\");\n      let ip = req.headers[\"x-forwarded-for\"] || req.connection.remoteAddress;\n      if (ip.indexOf(\"::ffff:\") !== -1)\n        ip = ip.slice(7);\n      res.status(202).send(\"Welcome to the Empire. Your address: \" + ip );\n    });\n\n    self.app.get(\"/stat.json\", function (req, res) {\n      res.status(202).send(stats);\n    });\n\n    self.app.get(\"/stat\", function (req, res) {\n      // { seedCount, leechCount, torrentCount, activeTcount, scrapeCount, successfulDown, countries };\n      let parsedResponce = `<h1><span style=\"color:blue;\">V1.2.0</span> - ${stats.torrentCount} Torrents {${stats.activeTcount} active}</h1>\\n\n                            <h2>Successful Downloads: ${stats.successfulDown}</h2>\\n\n                            <h2>Number of Scrapes to this tracker: ${stats.scrapeCount}</h2>\\n\n                            <h3>Connected Peers: ${stats.seedCount + stats.leechCount}</h3>\\n\n                            <h3><ul>Seeders: ${stats.seedCount}</ul></h3>\\n\n                            <h3><ul>Leechers: ${stats.leechCount}</ul></h3>\\n\n                            <h3>Countries that have connected: <h3>\\n\n                            <ul>`;\n\n      let countries;\n      for (countries in stats.countries)\n        parsedResponce += `<li>${stats.countries[countries]}</li>\\n`;\n\n      parsedResponce += \"</ul>\";\n\n      res.status(202).send(parsedResponce);\n    });\n\n    self.app.get(\"*\", function(req, res){\n      console.log(\"here1\");\n      res.status(404).send(\"<h1>404 Not Found</h1>\");\n    });\n\n    self.server.on(\"request\", self.app.bind(self));\n\n\n    // WebSocket:\n\n    self.wss.on(\"connection\", function connection(ws) {\n      // let location = url.parse(ws.upgradeReq.url, true);\n\n      let ip;\n      let peerAddress;\n      let port;\n      if (opts.docker) {\n        ip          = ws.upgradeReq.headers[\"x-forwarded-for\"];\n        peerAddress = ip.split(\":\")[0];\n        port        = ip.split(\":\")[1];\n      } else {\n        peerAddress = ws._socket.remoteAddress;\n        port        = ws._socket.remotePort;\n      }\n\n      if (peerAddress.indexOf(\"::ffff:\") !== -1)\n        peerAddress = peerAddress.slice(7);\n\n      console.log(\"Connection!\");\n      console.log(\"peerAddress\", peerAddress);\n      console.log(\"port\", port);\n\n      ws.on(\"message\", function incoming(msg) {\n        handleMessage(msg, peerAddress, port, \"ws\", (reply) => {\n          ws.send(reply);\n        });\n      });\n\n    });\n\n\n    // UDP:\n\n    self.udp4.bind(self.udpPORT);\n\n    self.udp4.on(\"message\", function (msg, rinfo) {\n      handleMessage(msg, rinfo.address, rinfo.port, \"udp\", (reply) => {\n        self.udp4.send(reply, 0, reply.length, rinfo.port, rinfo.address, (err) => {\n          if (err) { console.log(\"udp4 error: \", err); };\n        });\n      });\n    });\n    self.udp4.on(\"error\", function (err) { console.log(\"error\", err); });\n    self.udp4.on(\"listening\", () => { console.log(new Date() + \": UDP-4 Bound and ready.\"); } );\n\n    self.updateStatus((info) => {\n      stats = info;\n    });\n    setInterval(() => {\n      console.log(\"STAT UPDATE, \" + Date.now());\n      self.updateStatus((info) => {\n        stats = info;\n      });\n    }, 30 * 60 * 1000);\n\n    self.server.listen(self.PORT, function () { console.log(new Date() + \": HTTP Server Ready\" + \"\\n\" + new Date() + \": Websockets Ready.\"); });\n\n  }\n\n\n  updateStatus(cb) {\n    const self = this;\n    // Get hashes -> iterate through hashes and get all peers and leechers\n    // Also get number of scrapes 'scrape'\n    // Number of active hashes hash+':time'\n    let NOW            = Date.now(),\n        seedCount      = 0,  // check\n        leechCount     = 0,  // check\n        torrentCount   = 0,  // check\n        activeTcount   = 0,  // check\n        scrapeCount    = 0,  // check\n        successfulDown = 0,  // check\n        countries      = {};\n\n    client.get(\"hashes\", (err, reply) => {\n      if (!reply)\n        return;\n      let hashList = reply.split(\",\");\n      torrentCount = hashList.length;\n\n      client.get(\"scrape\", (err, rply) => {\n        if (err) { return; }\n        if (!rply)\n          return;\n        scrapeCount = rply;\n      });\n\n      hashList.forEach((hash, i) => {\n        client.mget([hash + \":seeders\", hash + \":leechers\", hash + \":time\", hash + \":completed\"], (err, rply) => {\n          if (err) { return; }\n          // iterate through:\n          // seeders\n          if (rply[0]) {\n            rply[0] = rply[0].split(\",\");\n            seedCount += rply[0].length;\n            rply[0].forEach((addr) => {\n              let ip = addr.split(\":\")[0];\n              let country = GeoIpNativeLite.lookup(ip);\n              if (country)\n                countries[country] = country.toUpperCase();\n            });\n          }\n          if (rply[1]) {\n            rply[1] = rply[1].split(\",\");\n            seedCount += rply[1].length;\n            rply[1].forEach((addr) => {\n              let ip = addr.split(\":\")[0];\n              let country = GeoIpNativeLite.lookup(ip);\n              if (country)\n                countries[country] = country.toUpperCase();\n            });\n          }\n          if (rply[2]) {\n            if (((NOW - rply[2]) / 1000) < 432000)\n              activeTcount++;\n          }\n          if (rply[3]) {\n            successfulDown += Number(rply[3]);\n          }\n          if (i === (torrentCount - 1)) {\n            cb({ seedCount, leechCount, torrentCount, activeTcount, scrapeCount, successfulDown, countries });\n          }\n        });\n\n      });\n    });\n\n  }\n\n  _debug = (...args: any[]) => {\n    args[0] = \"[\" + this._debugId + \"] \" + args[0];\n    debug.apply(null, args);\n  }\n\n}\n\n\n\n// MESSAGE FUNCTIONS:\n\nfunction handleMessage(msg, peerAddress, port, type, cb) {\n  // PACKET SIZES:\n  // CONNECT: 16 - ANNOUNCE: 98 - SCRAPE: 16 OR (16 + 20 * n)\n  let buf              = new Buffer(msg),\n      bufLength        = buf.length,\n      transaction_id   = 0,\n      action           = null,\n      connectionIdHigh = null,\n      connectionIdLow  = null,\n      hash             = null,\n      responce         = null,\n      PEER_ID          = null,\n      PEER_ADDRESS     = null,\n      PEER_KEY         = null,\n      NUM_WANT         = null,\n      peerPort         = port,\n      peers            = null;\n\n  // Ensure packet fullfills the minimal 16 byte requirement.\n  if (bufLength < 16) {\n    ERROR();\n  } else {\n    // Get generic data:\n    connectionIdHigh = buf.readUInt32BE(0),    // 0     64-bit integer  connection_id    0x41727101980\n    connectionIdLow  = buf.readUInt32BE(4),    // 0     64-bit integer  connection_id    0x41727101980\n    action           = buf.readUInt32BE(8),    // 8     32-bit integer  action           0 // connect 1 // announce 2 // scrape 3 // error\n    transaction_id   = buf.readUInt32BE(12);   // 12    32-bit integer  transaction_id\n  }\n  switch (action) {\n    case ACTION_CONNECT:\n      // Check whether the transaction ID is equal to the one you chose.\n      if (startConnectionIdLow !== connectionIdLow || startConnectionIdHigh !== connectionIdHigh) {\n        ERROR();\n        break;\n      }\n      // Create a new Connection ID and Transaction ID for this user... kill after 30 seconds:\n      let newConnectionIDHigh = ~~((Math.random() * 100000) + 1);\n      let newConnectionIDLow  = ~~((Math.random() * 100000) + 1);\n      client.setex(peerAddress + \":\" + newConnectionIDHigh,   60, 1);\n      client.setex(peerAddress + \":\" + newConnectionIDLow,    60, 1);\n      client.setex(peerAddress + \":\" + startConnectionIdLow,  60, 1);\n      client.setex(peerAddress + \":\" + startConnectionIdHigh, 60, 1);\n      // client.setex(peerAddress + ':' + transaction_id     , 30 * 1000, 1); // THIS MIGHT BE WRONG\n\n      // Create a responce buffer:\n      responce = new Buffer(16);\n      responce.fill(0);\n\n      responce.writeUInt32BE(ACTION_CONNECT, 0);        // 0       32-bit integer  action          0 // connect\n      responce.writeUInt32BE(transaction_id, 4);        // 4       32-bit integer  transaction_id\n      responce.writeUInt32BE(newConnectionIDHigh, 8);   // 8       64-bit integer  connection_id\n      responce.writeUInt32BE(newConnectionIDLow, 12);   // 8       64-bit integer  connection_id\n      cb(responce);\n      break;\n\n    case ACTION_ANNOUNCE: // 1\n      // Checks to make sure the packet is worth analyzing:\n      // 1. packet is atleast 84 bytes\n      if (bufLength < 84) {\n        ERROR();\n        break;\n      }\n      // Minimal requirements:\n      hash             = buf.slice(16, 36);\n      hash             = hash.toString(\"hex\");\n      PEER_ID          = buf.slice(36, 56);         // -WD0017-I0mH4sMSAPOJ && -LT1000-9BjtQhMtTtTc\n      PEER_ID          = PEER_ID.toString();\n      let DOWNLOADED   = readUInt64BE(buf, 56),\n          LEFT         = readUInt64BE(buf, 64),\n          UPLOADED     = readUInt64BE(buf, 72),\n          EVENT        = buf.readUInt32BE(80);\n\n      if (bufLength > 96) {\n        PEER_ADDRESS = buf.readUInt16BE(84);\n        PEER_KEY     = buf.readUInt16BE(88);\n        NUM_WANT     = buf.readUInt16BE(92);\n        peerPort     = buf.readUInt16BE(96);\n      }\n      // 2. check that Transaction ID and Connection ID match\n      client.mget([peerAddress + \":\" + connectionIdHigh, peerAddress + \":\" + connectionIdLow], (err, reply) => {\n        if ( !reply[0] || !reply[1] || err ) { ERROR(); return; }\n        addHash(hash);\n        // Check EVENT // 0: none; 1: completed; 2: started; 3: stopped\n        // If 1, 2, or 3 do sets first.\n        if (EVENT === 1) {\n          // Change the array this peer is housed in.\n          removePeer(peerAddress + \":\" + peerPort, hash + type + \":leechers\");\n          addPeer(peerAddress + \":\" + peerPort, hash + type + \":seeders\");\n          // Increment total users who completed file\n          client.incr(hash + \":completed\");\n        } else if (EVENT === 2) {\n          // Add to array (leecher array if LEFT is > 0)\n          if (LEFT > 0)\n            addPeer(peerAddress + \":\" + peerPort, hash + type + \":leechers\");\n          else\n            addPeer(peerAddress + \":\" + peerPort, hash + type + \":seeders\");\n        } else if (EVENT === 3) {\n          // Remove peer from array (leecher array if LEFT is > 0)\n          removePeer(peerAddress + \":\" + peerPort, hash + type + \":leechers\");\n          removePeer(peerAddress + \":\" + peerPort, hash + type + \":seeders\");\n          return;\n        }\n\n        client.mget([hash + type + \":seeders\", hash + type + \":leechers\"], (err, rply) => {\n          if ( err ) { ERROR(); return; }\n\n          // Convert all addresses to a proper hex buffer:\n          // Addresses return: 0 - leechers; 1 - seeders; 2 - hexedUp address-port pairs; 3 - resulting buffersize\n          let addresses = addrToBuffer(rply[0], rply[1], LEFT);\n\n          // Create a responce buffer:\n          responce = new Buffer(20);\n          responce.fill(0);\n\n          responce.writeUInt32BE(ACTION_ANNOUNCE, 0);          // 0           32-bit integer  action          1 -> announce\n          responce.writeUInt32BE(transaction_id, 4);           // 4           32-bit integer  transaction_id\n          responce.writeUInt32BE(INTERVAL, 8);                 // 8           32-bit integer  interval\n          responce.writeUInt32BE(addresses[0], 12);            // 12          32-bit integer  leechers\n          responce.writeUInt32BE(addresses[1], 16);            // 16          32-bit integer  seeders\n          responce = Buffer.concat([responce, addresses[2]]);  // 20 + 6 * n  32-bit integer  IP address\n                                                               // 24 + 6 * n  16-bit integer  TCP port\n          cb(responce);\n\n        });\n\n      });\n      break;\n\n    case ACTION_SCRAPE: // 2\n      // Check whether the transaction ID is equal to the one you chose.\n      // 2. check that Transaction ID and Connection ID match\n\n      // addresses return: 0 - leechers; 1 - seeders; 2 - hexedUp address-port pairs; 3 - resulting buffersize\n      // Create a responce buffer:\n      client.incr(\"scrape\");\n      let responces = new Buffer( 8 );\n      responces.fill(0);\n      responces.writeUInt32BE(ACTION_SCRAPE, 0);    // 0           32-bit integer  action          2 -> scrape\n      responces.writeUInt32BE(transaction_id, 4);   // 4           32-bit integer  transaction_id\n      let bufferSum = [];\n      // LOOP THROUGH REQUESTS\n      for (let i = 16; i < (buf.length - 16); i += 20) {\n        hash = buf.slice(i, i + 20);\n        hash = hash.toString(\"hex\");\n\n        client.mget([hash + type + \":seeders\", hash + type +  \":leechers\", hash + type +  \":completed\"], (err, rply) => {\n          if ( err ) { ERROR(); return; }\n\n          // convert all addresses to a proper hex buffer:\n          let addresses = addrToBuffer(rply[0], rply[1], 1);\n\n          let responce = new Buffer(20);\n          responce.fill(0);\n\n          responce.writeUInt32BE(addresses[1], 8);     // 8 + 12 * n  32-bit integer  seeders\n          responce.writeUInt32BE(rply[2], 12);         // 12 + 12 * n 32-bit integer  completed\n          responce.writeUInt32BE(addresses[0], 16);    // 16 + 12 * n 32-bit integer  leechers\n          bufferSum.push(responce);\n\n          if ( (i + 16) >= (buf.length - 16) ) {\n            let scrapes = Buffer.concat(bufferSum);\n            responces = Buffer.concat([responces, scrapes]);\n            cb(responces);\n          }\n        });\n      }\n      break;\n\n    default:\n      ERROR();\n  }\n\n  function ERROR() {\n    responce = new Buffer(11);\n    responce.fill(0);\n\n    responce.writeUInt32BE(ACTION_ERROR, 0);\n    responce.writeUInt32BE(transaction_id, 4);\n    responce.write(\"900\", 8);\n    cb(responce);\n  }\n\n  function addPeer(peer, where) {\n    client.get(where, (err, reply) => {\n      if (err) { ERROR(); return; }\n      else {\n        if (!reply)\n          reply = peer;\n        else\n          reply = peer + \",\" + reply;\n\n        reply = reply.split(\",\");\n        reply = _.uniq(reply);\n        // Keep the list under MAX_PEER_SIZE;\n        if (reply.length > MAX_PEER_SIZE) {\n          reply = reply.slice(0, MAX_PEER_SIZE);\n        }\n        reply = reply.join(\",\");\n        client.set(where, reply);\n      }\n    });\n  }\n\n  function removePeer(peer, where) {\n    client.get(where, (err, reply) => {\n      if (err) { ERROR(); return; }\n      else {\n        if (!reply)\n          return;\n        else {\n          reply = reply.split(\",\");\n          let index = reply.indexOf(peer);\n          if (index > -1) {\n            reply.splice(index, 1);\n          }\n          reply = reply.join(\",\");\n          client.set(where, reply);\n        }\n      }\n    });\n  }\n\n  function addrToBuffer(seeders, leechers, LEFT) {\n    // Addresses return: 0 - leechers; 1 - seeders; 2 - hexedUp address-port pairs; 3 - resulting buffersize\n    // Also we don't need to send the users own address\n    // If peer is a leecher, send more seeders; if peer is a seeder, send only leechers\n    let leecherCount   = 0,\n        seederCount    = 0,\n        peerBuffer     = null,\n        peerBufferSize = 0;\n\n    if (LEFT === 0 || !seeders || seeders === \"\")\n      seeders = new Buffer(0);\n    else {\n      seeders = seeders.split(\",\");\n      seederCount = seeders.length;\n      seeders = seeders.map((addressPort) => {\n        let addr = addressPort.split(\":\")[0];\n        let port = addressPort.split(\":\")[1];\n        addr = addr.split(\".\");\n        let b = new Buffer(6);\n        b.fill(0);\n        b.writeUInt8(addr[0], 0);\n        b.writeUInt8(addr[1], 1);\n        b.writeUInt8(addr[2], 2);\n        b.writeUInt8(addr[3], 3);\n        b.writeUInt16BE(port, 4);\n        return b;\n      });\n      seeders = Buffer.concat(seeders);\n    }\n\n    if (LEFT > 0 && seederCount > 50 && leechers > 15)\n        leechers = leechers.slice(0, 15);\n    if (!leechers || leechers === \"\")\n      leechers = new Buffer(0);\n    else {\n      leechers = leechers.split(\",\");\n      leecherCount = leechers.length;\n      leechers = leechers.map((addressPort) => {\n        let addr = addressPort.split(\":\")[0];\n        let port = addressPort.split(\":\")[1];\n        addr = addr.split(\".\");\n        let b = new Buffer(6);\n        b.fill(0);\n        b.writeUInt8(addr[0], 0);\n        b.writeUInt8(addr[1], 1);\n        b.writeUInt8(addr[2], 2);\n        b.writeUInt8(addr[3], 3);\n        b.writeUInt16BE(port, 4);\n        return b;\n      });\n      leechers = Buffer.concat(leechers);\n    }\n\n    peerBuffer = Buffer.concat([seeders, leechers]);\n    // Addresses return: 0 - leechers; 1 - seeders; 2 - hexedUp address-port pairs; 3 - resulting buffersize\n    return [leecherCount, seederCount, peerBuffer];\n  }\n\n  // Add a new hash to the swarm, ensure uniqeness\n  function addHash(hash) {\n    client.get(\"hashes\", (err, reply: any) => {\n      if (err) { ERROR(); return; }\n      if (!reply)\n        reply = hash;\n      else\n        reply = hash + \",\" + reply;\n      reply = reply.split(\",\");\n      reply = _.uniq(reply);\n      reply = reply.join(\",\");\n      client.set(\"hashes\", reply);\n      client.set(hash + \":time\", Date.now());\n    });\n  }\n\n  function getHashes() {\n    let r = client.get(\"hashes\", (err, reply: any) => {\n      if (err) { ERROR(); return null; }\n      reply = reply.split(\",\");\n      return reply;\n    });\n    return r;\n  }\n\n}\n\nfunction binaryToHex(str) {\n  if (typeof str !== \"string\") {\n    str = String(str);\n  }\n  return Buffer.from(str, \"binary\").toString(\"hex\");\n}\n\nfunction hexToBinary(str) {\n  if (typeof str !== \"string\") {\n    str = String(str);\n  }\n  return Buffer.from(str, \"hex\").toString(\"binary\");\n}\n\n\n\n\nexport default Server;\n"]}
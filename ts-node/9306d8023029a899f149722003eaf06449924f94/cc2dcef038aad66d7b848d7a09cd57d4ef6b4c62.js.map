{"version":3,"file":"/Users/connor/Desktop/2017/PeerTracker/node/Client.ts","sources":["/Users/connor/Desktop/2017/PeerTracker/node/Client.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { EventEmitter } from \"events\";\nimport * as writeUInt64BE from \"writeUInt64BE\";\nimport { Buffer } from \"buffer\";\nimport * as dgram from \"dgram\";\nimport * as debug from \"debug\";\ndebug(\"trackerClient\");\n\n\nconst ACTION_CONNECT   = 0,\n      ACTION_ANNOUNCE  = 1,\n      ACTION_SCRAPE    = 2,\n      ACTION_ERROR     = 3;\nlet   connectionIdHigh = 0x417,\n      connectionIdLow  = 0x27101980;\n\nfunction udp(announcement: string, trackerHost: string, port: number, myPort: number, infoHash: string, left: number, uploaded: number, downloaded: number) {\n  return new Client(\"udp\", announcement, trackerHost, port, myPort, infoHash, left, uploaded, downloaded);\n}\n\nfunction ws(announcement: string, trackerHost: string, port: number, myPort: number, infoHash: string, left: number, uploaded: number, downloaded: number) {\n  return new Client(\"ws\", announcement, trackerHost, port, myPort, infoHash, left, uploaded, downloaded);\n}\n\nclass Client extends EventEmitter {\n  TYPE:           string;\n  USER:           string;\n  CASE:           string;\n  HOST:           string;\n  HASH:           string;\n  PORT:           number;\n  MY_PORT:        number;\n  TRANSACTION_ID: number;\n  EVENT:          number;\n  SCRAPE:         Boolean;\n  DOWNLOADED:     number;\n  LEFT:           number;\n  UPLOADED:       number;\n  KEY:            number;\n  IP_ADDRESS:     number;\n  TIMEOUTS:       Array<any>;\n  TIMEOUTS_DATE:  number;\n  TIMEOUT_N:      number;\n  server:         any;\n\n  constructor(type: string, announcement: string, trackerHost: string, port: number, myPort: number, infoHash: string, left: number, uploaded: number, downloaded: number) {\n    super();\n    if (!(this instanceof Client))\n      return new Client(type, announcement, trackerHost, port, myPort, infoHash, left, uploaded, downloaded);\n    const self = this;\n\n    self.TYPE = type;\n    self.USER = \"-EM0012-\" + guidvC();\n    self.CASE = announcement;\n    self.HOST = trackerHost;\n    self.HASH = infoHash;\n    self.PORT = port;\n    self.MY_PORT = myPort;\n    self.TRANSACTION_ID = null; // This will be our method of keeping track of new connections...\n    self.EVENT = 0;\n\n    // Avoid scraping unless it's a timed update\n    self.SCRAPE = true;\n\n    self.LEFT       = left;\n    self.UPLOADED   = uploaded;\n    self.DOWNLOADED = downloaded;\n    self.KEY        = 0;\n    self.IP_ADDRESS = 0; // Default unless behind a proxy\n\n    // Setup server\n    self.server = (self.TYPE === \"udp\") ? dgram.createSocket(\"udp4\") : dgram.createSocket(\"udp4\");\n    self.server.on(\"listening\", function () {\n      switch (self.CASE) {\n        case \"start\":\n          self.EVENT = 2;\n          break;\n        case \"stop\":\n          self.EVENT = 3;\n          setTimeout(() => {\n            // Close the server\n            self.server.close();\n          }, 1500);\n          break;\n        case \"complete\":\n          self.EVENT = 1;\n          break;\n        case \"update\":\n          self.EVENT = 0;\n          break;\n        case \"scrape\":\n          self.scrape();\n          self.EVENT = 2;\n          return;\n        default:\n          self.emit(\"error\", \"Bad call signature.\");\n          return;\n      }\n      self.announce();\n    });\n    if (self.TYPE === \"udp\") {\n      self.server.on(\"message\", function (msg, rinfo) { self.message(msg, rinfo); });\n      self.server.bind(self.MY_PORT);\n    } else {\n\n    }\n  }\n\n  sendPacket(buf: Buffer) {\n    const self = this;\n    self.server.send(buf, 0, buf.length, self.PORT, self.HOST, (err) => {\n        if (err) { self.emit(\"error\", err); }\n    });\n  }\n\n  startConnection() {\n    const self = this;\n\n    // Prepare for the next connection:\n    self.TRANSACTION_ID = ~~( (Math.random() * 100000) + 1);\n\n    // Prep a packet for delivery:\n    let buf = new Buffer(16);\n    buf.fill(0);\n\n    buf.writeUInt32BE(connectionIdHigh, 0);      // 0    64-bit integer  connection_id   0x41727101980\n    buf.writeUInt32BE(connectionIdLow, 4);       // 0    64-bit integer  connection_id   0x41727101980\n    buf.writeUInt32BE(ACTION_CONNECT, 8);        // 8    32-bit integer  action          0 // connect\n    buf.writeUInt32BE(self.TRANSACTION_ID, 12);  // 12   32-bit integer  transaction_id\n\n    // Send packet\n    self.sendPacket(buf);\n  }\n\n  scrape() {\n    const self = this;\n\n    if (!self.TRANSACTION_ID) {\n        self.startConnection();\n    } else {\n\n      let buf = new Buffer(36);\n      buf.fill(0);\n\n      buf.writeUInt32BE(connectionIdHigh, 0);      // 0             64-bit integer  connection_id   0x41727101980\n      buf.writeUInt32BE(connectionIdLow, 4);       // 0             64-bit integer  connection_id   0x41727101980\n      buf.writeUInt32BE(ACTION_SCRAPE, 8);         // 8             32-bit integer  action          2 // scrape\n      buf.writeUInt32BE(self.TRANSACTION_ID, 12);  // 12            32-bit integer  transaction_id\n      buf.write(self.HASH, 16, 20, \"hex\");         // 16 + 20 * n   20-byte string  info_hash\n\n      // Send Packet\n      self.sendPacket(buf);\n    }\n\n  }\n\n  announce() {\n    // EVENT: 0: none; 1: completed; 2: started; 3: stopped\n    const self = this;\n\n    if (!self.TRANSACTION_ID) {\n        self.startConnection();\n    } else {\n      // Prepare announce packet for delivery\n      let buf = new Buffer(98);\n      buf.fill(0);\n\n      buf.writeUInt32BE(connectionIdHigh, 0);     //   0    64-bit integer  connection_id\n      buf.writeUInt32BE(connectionIdLow, 4);      //   0    64-bit integer  connection_id\n      buf.writeUInt32BE(ACTION_ANNOUNCE, 8);      //   8    32-bit integer  action          1 // announce\n      buf.writeUInt32BE(self.TRANSACTION_ID, 12); //   12   32-bit integer  transaction_id\n      buf.write(self.HASH, 16, 20, \"hex\");        //   16   20-byte string  info_hash\n      buf.write(self.USER, 36, 20);               //   36   20-byte string  peer_id\n      writeUInt64BE(buf, self.DOWNLOADED, 56);    //   56   64-bit integer  downloaded\n      writeUInt64BE(buf, self.LEFT, 64);          //   64   64-bit integer  left\n      writeUInt64BE(buf, self.UPLOADED, 72);      //   72   64-bit integer  uploaded\n      buf.writeUInt32BE(self.EVENT, 80);          //   80   32-bit integer  event           0 // 0: none; 1: completed; 2: started; 3: stopped\n      buf.writeUInt32BE(self.IP_ADDRESS, 84);     //   84   32-bit integer  IP address      0 // default\n      buf.writeUInt32BE(self.KEY, 88);            //   88   32-bit integer  key\n      buf.writeInt32BE((-1), 92);                 //   92   32-bit integer  num_want        -1 // default\n      buf.writeUInt16BE(self.MY_PORT, 96);        //   96   16-bit integer  port\n\n      // Send Packet\n      self.sendPacket(buf);\n\n      self.TRANSACTION_ID = null;\n      connectionIdHigh    = 0x417,\n      connectionIdLow     = 0x27101980;\n    }\n  }\n\n  message(msg: string, rinfo: Object) {\n    const self = this;\n    let buf = new Buffer(msg);\n\n    let action = buf.readUInt32BE(0);            // 0   32-bit integer  action   0 // connect 1 // announce 2 // scrape 3 // error\n    self.TRANSACTION_ID = buf.readUInt32BE(4);   // 4   32-bit integer  transaction_id\n    if (action === ACTION_CONNECT) {\n\n      // Server will establish a new connection_id to talk on.\n      // This connection_id dies after 5-10 seconds.\n      connectionIdHigh = buf.readUInt32BE(8);     // 0   64-bit integer  connection_id\n      connectionIdLow  = buf.readUInt32BE(12);    // 0   64-bit integer  connection_id\n\n      // Announce\n      self.announce();\n\n    } else if (action === ACTION_SCRAPE) {\n\n      let seeders   = buf.readUInt32BE(8),   //  8    32-bit integer  interval\n          completed = buf.readUInt32BE(12),  //  12   32-bit integer  completed\n          leechers  = buf.readUInt32BE(16);  //  16   32-bit integer  leechers\n      self.emit(\"scrape\", seeders, completed, leechers);\n      self.announce();\n\n    } else if (action === ACTION_ANNOUNCE) {\n\n      let interval  = buf.readUInt32BE(8),   //  8           32-bit integer  interval\n          leechers  = buf.readUInt32BE(12),  //  12          32-bit integer  leechers\n          seeders   = buf.readUInt32BE(16),  //  16          32-bit integer  seeders\n          bufLength = buf.length,            //  20 + 6 * n  32-bit integer  IP address\n          addresses = [];                    //  24 + 6 * n  16-bit integer  TCP port\n\n      for (let i = 20; i < bufLength; i += 6) {\n        let address = `${buf.readUInt8(i)}.${buf.readUInt8(i + 1)}.${buf.readUInt8(i + 2)}.${buf.readUInt8(i + 3)}:${buf.readUInt16BE(i + 4)}`;\n        addresses.push(address);\n      }\n      // Send up\n      self.emit(\"announce\", interval, leechers, seeders, addresses);\n      // Close the server\n      self.server.close();\n\n    } else if (action === ACTION_ERROR) {\n      let errorResponce = buf.slice(8).toString();\n      self.emit(\"error\", errorResponce);\n\n      // Close the server\n      self.server.close();\n    }\n  }\n\n}\n\nfunction guidvC() {\n    return Math.floor((1 + Math.random()) * 0x1000000000000)\n      .toString(16)\n      .substring(1);\n}\n\nexport { udp, ws };\n"]}